#ifndef __ASR_SOCKET_ADDR_IP4_H
#define __ASR_SOCKET_ADDR_IP4_H

#include <asr/socket-addr>

namespace asr
{
    class SockAddrIP4 : public SockAddr
    {
        private:

        struct sockaddr_in *desc() const {
            return (struct sockaddr_in *)&data;
        }

        public:

        SockAddrIP4() : SockAddr(sizeof(struct sockaddr_in)) {
            desc()->sin_family = AF_INET;
        }

        virtual ~SockAddrIP4() { }

        SockAddrIP4(int port, const char *ip4=nullptr) : SockAddrIP4() {
            set_port(port);
            set_address(ip4);
        }

        SockAddr *alloc() const override {
            return new SockAddrIP4();
        }

        void dump(std::ostream& os) const override {
            const char *addr = get_address();
            os << (addr ? addr : "0.0.0.0") << ":" << get_port();
        }

        void set_port(int port) {
            desc()->sin_port = ::htons(port);
        }

        int get_port() const {
            return ::ntohs(desc()->sin_port);
        }

        void set_address(const char *ip4)
        {
            auto d = desc();
            if (ip4 != nullptr)
                ::inet_pton(AF_INET, ip4, &d->sin_addr);
            else
                d->sin_addr.s_addr = INADDR_ANY;
        }

        const char *get_address() const {
            return ::inet_ntoa(desc()->sin_addr);
        }

        void set_address_int(uint32_t addr) {
            desc()->sin_addr.s_addr = ::htonl(addr);
        }

        uint32_t get_address_int() const {
            return ::ntohl(desc()->sin_addr.s_addr);
        }
    };

};

#endif
