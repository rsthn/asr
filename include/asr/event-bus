#ifndef __ASR_EVENTBUS_H
#define __ASR_EVENTBUS_H

#include <asr/event>
#include <asr/ptr>

#include <unordered_map>
#include <list>
#include <string>

namespace asr
{
    /**
     * The event bus class allows several event listeners to be attached to it, these will be invoked
     * whenever the event that is being listened to is triggered.
     */
    class EventBus
    {
        private:

        /**
         * Globally available event and group codes.
         */
        static std::unordered_map<std::string, int> event_codes;
        static std::unordered_map<std::string, int> group_codes;

        /**
         * Listeners attached to this event bus.
         */
        std::unordered_map<int, std::list<ptr<EventListener>>> listeners;

        /**
         * Queue of delayed events. All delayed events are dispatched by calling `dispatch()`.
         */
        std::list<ptr<Event>> queue;


        public:

        /**
         */
        EventBus() { }
        virtual ~EventBus() { }

        /**
         * Returns the code for the specified event name.
         * @param name
         * @return int 
         */
        static int getCode(std::string name);

        /**
         * Returns the code for the specified group name.
         * @param name 
         * @return int
         */
        static int getGroup(std::string name);

        /**
         * Removes all listeners and empties the queue.
         */
        void reset();

        /**
         * Adds an event listener for a specified event code (and group if provided).
         * @param eventGroup 
         * @param eventCode
         * @param handler
         */
        void on(int eventGroup, int eventCode, EventHandler *handler);

        void on(int eventCode, EventHandler *handler) {
            return on(0, eventCode, handler);
        }

        /**
         * Removes an event listener from the bus that matches the event code, group and provided handler. Use zero (0) to 
         * remove all listeners for the specified event code or group.
         *
         * @param eventGroup 
         * @param eventCode 
         * @param handler 
         */
        void off(int eventGroup, int eventCode, EventHandler *handler = nullptr);

        void off(int eventCode, EventHandler *handler = nullptr) {
            off(0, eventCode, handler);
        }

        /**
         * Silences or unsilences all handlers attached to an event. If the event fires, silenced handlers will not be called.
         * @param eventGroup 
         * @param eventCode 
         * @param value 
         */
        void silence(int eventGroup, int eventCode, bool value);

        void silence(int eventCode, bool value) {
            silence(0, eventCode, value);
        }

        /**
         * Prepares an event for its later use. The event propagation is started by calling the `resume` method. Note that
         * `false` is returned if there is an error with the event code or if there are no listeners for the event.
         *
         * @param event 
         * @return bool
         */
        bool prepare(ptr<Event> &event);

        /**
         * Dispatches an event to its respective listeners.
         * @param event 
         */
        void dispatch(ptr<Event> event);

        /**
         * Adds an event to the event bus's queue to be dispatched later by calling `dispatch`. If there is no matching
         * listener for the desired event no handler will be queued.
         * @param event 
         */
        void enqueue(ptr<Event> event);

        /**
         * Dispatches all the delayed events in the queue.
         */
        void dispatch();

    };

};

#endif
