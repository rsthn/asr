#ifndef __ASR_SOCKET_ADDR_IP6_H
#define __ASR_SOCKET_ADDR_IP6_H

#include <asr/socket-addr>

namespace asr
{
    class SockAddrIP6 : public SockAddr
    {
        private:

        struct sockaddr_in6 *desc() const {
            return (struct sockaddr_in6 *)&data;
        }

        public:

        SockAddrIP6() : SockAddr(sizeof(struct sockaddr_in6)) {
            desc()->sin6_family = AF_INET6;
        }

        virtual ~SockAddrIP6() { }

        SockAddrIP6(int port, const char *ip6=nullptr) : SockAddrIP6() {
            set_port(port);
            set_address(ip6);
        }

        SockAddr *alloc() const override {
            return new SockAddrIP6();
        }

        void dump(std::ostream& os) const override {
            const char *addr = get_address();
            os << (addr ? addr : "localhost") << ":" << get_port();
        }

        void set_port(int port) {
            desc()->sin6_port = ::htons(port);
        }

        int get_port() const {
            return ::ntohs(desc()->sin6_port);
        }

        void set_address(const char *ip6)
        {
            auto d = desc();
            if (ip6 != nullptr)
                ::inet_pton(AF_INET6, ip6, &d->sin6_addr);
            else
                d->sin6_addr = in6addr_any;
        }

        ptr<char> get_address() const
        {
            ptr<char> str = new char[INET6_ADDRSTRLEN];
            auto d = desc();
            ::inet_ntop(AF_INET6, &d->sin6_addr, str.get(), INET6_ADDRSTRLEN);
            return str;
        }
    };

};

#endif
