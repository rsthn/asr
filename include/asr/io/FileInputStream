#ifndef __ASR_IO_FILEINPUTSTREAM_H
#define __ASR_IO_FILEINPUTSTREAM_H

#include <asr/io/Buffer>
#include <cstdio>

namespace asr {
namespace io {

    /**
     * @brief Implements stream functionality to read from a file. Any data written to the buffer will become
     * available for subsequent read operations.
     */
    class FileInputStream : public Buffer
    {
        public:

        /**
         * File open modes.
         */
        static constexpr int O_TEXT		= 0x00;
        static constexpr int O_BINARY	= 0x01;


        private:

        /**
         * @brief File handle.
         */
        FILE *fp;

        /**
         * @brief Indicates if the fp was created by the class and thus can be destroyed.
         */
        bool fpOwned;

        /**
         * @brief File size.
         */
        long fsize;


        protected:

        /**
        **	Executed when at least nMin and at most nMax bytes are required to be available in the buffer. When nMax is zero, there is no limit
        **	of maximum number bytes to be filled. When inquiry is true, no data operation should be made, only return if it is possible.
        */
        bool fillRequest (int nMin, int nMax=0, bool inquiry=false) override;


        public:

        /**
         * @brief Opens a file for reading and sets up the stream.
         * 
         * @param filepath The path to the file.
         * @param mode Mode to open the file in (O_TEXT or O_BINARY)
         * @param bufferSize Requested buffer size (default is 512 bytes).
         */
        FileInputStream (const char *filepath, int mode=O_TEXT, int bufferSize=512);

        /**
         * @brief Uses the specified FILE as input. Will not close the file upon destruction or by manual call to `close` unless
         * `fpOwned` is set to true. The available data will be calculated from the current file position to its end.
         * 
         * @param fp File handle to use.
         * @param bufferSize Requested buffer size (default is 512 bytes).
         * @param fpOwned Indicates if the file handle can be closed by the class.
         */
        FileInputStream (FILE *fp, int bufferSize=512, bool fpOwned=false);

        /**
        */
        virtual ~FileInputStream();

        /**
         * @brief Closes the file stream.
         */
        void close();
    };

}};

#endif
