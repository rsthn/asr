#ifndef __ASR_IO_FILEOUTPUTSTREAM_H
#define __ASR_IO_FILEOUTPUTSTREAM_H

#include <asr/io/Buffer>
#include <cstdio>

namespace asr {
namespace io {

    /**
     * @brief Provides a stream to write to a file.
     */
    class FileOutputStream : public Buffer
    {
        public:

        /**
        **	File open modes.
        */
        static constexpr int O_TEXT				= 0x00;
        static constexpr int O_BINARY			= 0x01;
        static constexpr int O_APPEND			= 0x04;


        private:

        /**
         * @brief File descriptor.
         */
        FILE *fp;

        /**
         * @brief Indicates if the fp was created by the class and thus can be destroyed.
         */
        bool fpOwned;


        protected:

        /**
        **	Executed when at least nMin and at most nMax bytes of free space are required. When nMax is zero, there is no limit of maximum number
        **	of bytes to free. When inquiry is true, no data operation should be made, only return if it is possible.
        */
        bool drainRequest (int nMin, int nMax=0, bool inquiry=false) override;

        public:

        /**
         * @brief Opens a file for binary writing and sets up the stream.
         * 
         * @param filepath The path to the file.
         * @param mode Mode to open the file in (O_TEXT, O_BINARY or O_APPEND)
         * @param bufferSize Requested buffer size (default is 512 bytes).
         */
        FileOutputStream (const char *filepath, int mode=O_TEXT, int bufferSize=512);

        /**
         * @brief Uses the specified FILE as output. Will not close the file upon destruction or by manual call to `close` unless
         * `fpOwned` is set to true.
         * 
         * @param fp File handle to use.
         * @param bufferSize Requested buffer size (default is 512 bytes).
         * @param fpOwned Indicates if the file handle can be closed by the class.
         */
        FileOutputStream (FILE *fp, int bufferSize=512, bool fpOwned=false);

        /**
        */
        virtual ~FileOutputStream();

        /**
         * @brief Closes the file stream.
         */
        void close();
    };

}};

#endif
