#ifndef __ASR_EVENT_H
#define __ASR_EVENT_H

#include <asr/ptr>
#include <memory>
#include <list>

namespace asr
{
    // Forward declaration.
    class Event;
    class EventBus;

    //
    typedef void (EventHandler) (Event*);

    //
    struct EventListener
    {
        /**
         * Indicates if the listener has been silenced if greater than zero. When so, the handler will not be executed.
         */
        int silent;

        /**
         * Event group (zero is the global group).
         */
        int group_code;

        /**
         * Handler function.
         */
        EventHandler *handler;

        /**
         * Constructs the event listener.
         */
        EventListener (int group_code, EventHandler *handler) : 
            silent(0), group_code(group_code), handler(handler)
        { }
    };


    /**
     * Holds the information about a triggered event. It also provides support to allow asynchronous event
     * propagation and event chaining.
     */
    class Event
    {
        friend EventBus;

        private:

        /**
         * Event bus that triggered the event.
         */
        EventBus *bus;

        /**
         * Indicates if the most recent event handler called wants to use async mode. Set by calling the `wait` method.
         */
        bool is_async;

        /**
         * Queue of listeners to invoke.
         */
        std::list<ptr<EventListener>> list;

        /**
         * Node to the current event listener to execute.
         */
        std::list<ptr<EventListener>>::iterator curr;

        /**
         * Next event to be dispatched when the current event is resolved.
         */
        ptr<Event> next;

        /**
         * Sets the list of listeners to invoke.
         */
        void prepare (EventBus *bus, std::list<ptr<EventListener>> &&list) {
            this->bus = bus;
            this->list = list;
            curr = this->list.begin();
        }


        public:

        /**
         * Code of the event.
         */
        int event_code;

        /**
         * Group of the event.
         */
        int group_code;

        /**
         * Time of the event in milliseconds.
         */
        time_t event_time;

        /**
         */
        Event (int event_code, int group_code=0, time_t event_time=0)
            : event_code(event_code), group_code(group_code), event_time(event_time)
        {
            is_async = false;
            next = nullptr;
        }

        virtual ~Event()
        { }

        /**
         * Remove copy and move constructors and assignment operators.
         */
        Event(const Event&) = delete;
        Event(Event&&) noexcept = delete;
        Event& operator=(const Event&) = delete;
        Event& operator=(Event&&) noexcept = delete;

        /**
         * Sets the internal asynchronous flag, should be called before a handler returns. If a handler calls
         * this method it should also call `resume` when all async operations are finished.
         */
        void wait() {
            is_async = true;
        }

        /**
         * Resumes event propagation. Should be called if an event handler had previously called `wait`.
         */
        void resume();

        /**
         * Adds the specified event to the bottom of this event chain.
         * @param event 
         */
        void enqueue(ptr<Event> event);
    };

};

#endif
