#ifndef __ASR_UTILS_ITERATOR_H
#define __ASR_UTILS_ITERATOR_H

namespace asr {
namespace utils {

	/**
	**	Generic iterator class, useful for range-based loops.
	*/

	template<class C, typename I, typename T>
	class Iterator
	{
		public:

		C container;
		I index;

		/**
		**	Constructs the iterator.
		*/
		Iterator (C container, I index) : container(container), index(index) { }

		/**
		**	Returns false if iteration should be stopped.
		*/
		bool operator!= (Iterator<C,I,T>& value)
		{
			return container->iteratorNotEquals(this, &value);
		}

		/**
		**	Returns a reference to the actual underlying value.
		*/
		T& operator* ()
		{
			return container->iteratorDereference(this);
		}

		/**
		**	Moves the iteration to the next step.
		*/
		Iterator<C,I,T>& operator++ ()
		{
			container->iteratorIncrement(this);
			return *this;
		}
	};

}};

#endif
