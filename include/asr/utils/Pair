#ifndef __ASR_UTILS_PAIR_H
#define __ASR_UTILS_PAIR_H

#include <asr/utils/Comparator>
#include <asr/utils/Destroyer>
#include <asr/utils/Hash>

namespace asr {
namespace utils {

	/**
	**	Template class for item pairs (2-values).
	*/
	template<typename Ta, typename Tb>
	class Pair
	{
		public:

		/**
		**	Values.
		*/
		Ta key;
		Tb value;

		/**
		 * Constructs the instance and sets the values of the pair.
		 */
		Pair (Ta key, Tb value) : key(key), value(value) { }
		//Pair (Ta key) : key(key), value(key) { }
		//Pair () { }

		//Pair (const Pair *src) : key(src->key), value(src->value) { }
		//Pair (const Pair& src) : key(src.key), value(src.value) { }

		/**
		 * Destroys the pair object and all values. To preserve values call reset() first.
		 */
		~Pair()
		{
			clear();
		}

		/**
		 * Deletes the contents. Valid only if type Ta or Tb are pointers to objects.
		 */
		Pair *clear()
		{
			Destroyer<Ta>::destroy(key);
			Destroyer<Tb>::destroy(value);

			return this;
		}

		/**
		 * Removes references to the values. Values are not deleted.
		 */
		Pair *reset()
		{
			Destroyer<Ta>::destroy(key, false);
			Destroyer<Tb>::destroy(value, false);

			return this;
		}

		/**
		 * Compares the pair's first value against the given value and returns the result.
		 */
		template<typename K>
		int compare (K value) const
		{
			return ComparatorB<Ta,K>::compare(this->key, value);
		}

		/**
		 * Compares the pair against the given one and returns the result.
		 */
		int compare (const Pair<Ta,Tb>* value) const
		{
			int tmp = Comparator<Ta>::compare(this->key, value->key);
			if (!tmp) tmp = Comparator<Tb>::compare(this->value, value->value);

			return tmp;
		}

		int compare (const Pair<Ta,Tb>& value) const { return compare(&value); }

		/**
		 * Returns the hash of the first value of the pair.
		 */
		uint32_t getHash() const
		{
			return Hash<Ta>::get(this->key);
		}
	};

}};

#endif
