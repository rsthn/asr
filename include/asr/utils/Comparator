#ifndef __ASR_UTILS_COMPARATOR_H
#define __ASR_UTILS_COMPARATOR_H

#include <type_traits>
#include <cstring>
#include <cstdio>

namespace asr {
namespace utils {

	/**
	**	Generic utility to compare an item of type T against an item of type T, or item type T against an item of type U.
	**	Compares two items and returns -1, 0, or +1 indicating if the leftItem is less, equal or greater than rightItem respectively.
	**
	**	When comparing objects, their respective classes should implement a compare() method.
	**
	**	int Comparator<T>::compare (T leftItem, T rightItem);
	**	int ComparatorB<T,U>::compare (T leftItem, U rightItem);
	*/

	template<typename T, int=
		1*(std::is_pointer<T>::value) |
		2*(std::is_arithmetic<T>::value || std::is_arithmetic<typename std::remove_pointer<T>::type>::value) |
		4*(std::is_class<T>::value || std::is_reference<T>::value || std::is_class<typename std::remove_pointer<T>::type>::value)>
	struct Comparator { };

	template<> /* const character string */
	struct Comparator<const char *,3> {
		static inline int compare (const char *leftItem, const char *rightItem) { return std::strcmp(leftItem, rightItem); }
		static inline int rcompare (const char *leftItem, const char *rightItem) { return -std::strcmp(leftItem, rightItem); }
	};

	template<> /* float constant */
	struct Comparator<float,2> {
		static inline int compare (float leftItem, float rightItem) { return leftItem == rightItem ? 0 : (leftItem - rightItem < 0 ? -1 : 1); }
		static inline int rcompare (float leftItem, float rightItem) { return -(leftItem == rightItem ? 0 : (leftItem - rightItem < 0 ? -1 : 1)); }
	};

	template<> /* double constant */
	struct Comparator<double,2> {
		static inline int compare (double leftItem, double rightItem) { return leftItem == rightItem ? 0 : (leftItem - rightItem < 0 ? -1 : 1); }
		static inline int rcompare (double leftItem, double rightItem) { return -(leftItem == rightItem ? 0 : (leftItem - rightItem < 0 ? -1 : 1)); }
	};

	template<typename T> /* pointer */
	struct Comparator<T,1> {
		static inline int compare (const T leftItem, const T rightItem) { return leftItem != nullptr && rightItem != nullptr ? Comparator<typename std::remove_pointer<T>::type>::compare(*leftItem, *rightItem) : -1; }
		static inline int rcompare (const T leftItem, const T rightItem) { return -(leftItem != nullptr && rightItem != nullptr ? Comparator<typename std::remove_pointer<T>::type>::compare(*leftItem, *rightItem) : -1); }
	};

	template<typename T> /* arithmetic */
	struct Comparator<T,2> {
		static inline int compare (T leftItem, T rightItem) { return leftItem - rightItem; }
		static inline int rcompare (T leftItem, T rightItem) { return -(leftItem - rightItem); }
	};

	template<typename T> /* pointer to arithmetic */
	struct Comparator<T,3> {
		static inline int compare (const T leftItem, const T rightItem) { return leftItem != nullptr && rightItem != nullptr ? Comparator<typename std::remove_pointer<T>::type>::compare(*leftItem, *rightItem) : -1; }
		static inline int rcompare (const T leftItem, const T rightItem) { return -(leftItem != nullptr && rightItem != nullptr ? Comparator<typename std::remove_pointer<T>::type>::compare(*leftItem, *rightItem) : -1); }
	};

	template<typename T> /* class */
	struct Comparator<T,4> {
		static inline int compare (T leftItem, T rightItem) { return leftItem.compare(rightItem); }
		static inline int rcompare (T leftItem, T rightItem) { return -leftItem.compare(rightItem); }
	};

	template<typename T> /* pointer to class */
	struct Comparator<T,5> {
		static inline int compare (const T leftItem, const T rightItem) { return leftItem != nullptr ? leftItem->compare(rightItem) : -1; }
		static inline int rcompare (const T leftItem, const T rightItem) { return -(leftItem != nullptr ? leftItem->compare(rightItem) : -1); }
	};

	/**
	**	Generic utility to compare an item of type T against an item of type U.
	**
	**	int ComparatorB<T,U>::compare (T leftItem, U rightItem);
	*/

	template<typename T, typename U, int=
		1*(std::is_pointer<T>::value) |
		2*(std::is_arithmetic<T>::value || std::is_arithmetic<typename std::remove_pointer<T>::type>::value) |
		4*(std::is_class<T>::value || std::is_reference<T>::value || std::is_class<typename std::remove_pointer<T>::type>::value) |
		16*(std::is_same<T,U>::value)>
	struct ComparatorB { };

	template<typename T, int K> /* same type */
	struct ComparatorB<T,T,K> {
		static inline int compare (T leftItem, T rightItem) { return Comparator<T>::compare(leftItem, rightItem); }
		static inline int rcompare (T leftItem, T rightItem) { return -Comparator<T>::compare(leftItem, rightItem); }
	};

	template<> /* floating-point */
	struct ComparatorB<float,double,2> {
		static inline int compare (float leftItem, double rightItem) { return Comparator<float>::compare(leftItem, rightItem); }
		static inline int rcompare (float leftItem, double rightItem) { return -Comparator<float>::compare(leftItem, rightItem); }
	};

	template<> /* floating-point */
	struct ComparatorB<double,float,2> {
		static inline int compare (double leftItem, float rightItem) { return Comparator<double>::compare(leftItem, rightItem); }
		static inline int rcompare (double leftItem, float rightItem) { return -Comparator<double>::compare(leftItem, rightItem); }
	};

	template<typename T, typename U> /* pointer */
	struct ComparatorB<T,U,1> {
		static inline int compare (T leftItem, U rightItem) { return leftItem != nullptr ? ComparatorB<typename std::remove_pointer<T>::type, U>::compare(*leftItem, rightItem) : -1; }
		static inline int rcompare (T leftItem, U rightItem) { return -(leftItem != nullptr ? ComparatorB<typename std::remove_pointer<T>::type, U>::compare(*leftItem, rightItem) : -1); }
	};

	template<typename T, typename U> /* class */
	struct ComparatorB<T,U,4> {
		static inline int compare (T leftItem, U rightItem) { return leftItem.compare(rightItem); }
		static inline int rcompare (T leftItem, U rightItem) { return -leftItem.compare(rightItem); }
	};

	template<typename T, typename U> /* pointer to class */
	struct ComparatorB<T,U,5> {
		static inline int compare (T leftItem, U rightItem) { return leftItem != nullptr ? leftItem->compare(rightItem) : -1; }
		static inline int rcompare (T leftItem, U rightItem) { return -(leftItem != nullptr ? leftItem->compare(rightItem) : -1); }
	};

}};

#endif
