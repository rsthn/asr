#ifndef __ASR_UTILS_TRAITS_H
#define __ASR_UTILS_TRAITS_H

#include <type_traits>

namespace traits
{
	struct no_delete { };
};

namespace asr {
namespace utils {

	/**
	**	Utilities to add traits to any class and check their availability.
	*/

	struct true_t { static constexpr const bool value = true; };
	struct false_t { static constexpr const bool value = false; };

	/**
	**	Used to obtain the base-type (without pointer and without cv-qualifier) of the given type.
	**	base_type<T>::type
	*/
	template<typename T, bool=std::is_pointer<T>::value> struct base_type { };
	template<typename T> struct base_type<const T,false> { typedef T type; };
	template<typename T> struct base_type<const T,true> { typedef typename base_type<typename std::remove_pointer<T>::type>::type type; };

	template<typename T> struct base_type<volatile T,false> { typedef T type; };
	template<typename T> struct base_type<volatile T,true> { typedef typename base_type<typename std::remove_pointer<T>::type>::type type; };

	template<typename T> struct base_type<T,false> { typedef T type; };
	template<typename T> struct base_type<T,true> { typedef typename base_type<typename std::remove_pointer<T>::type>::type type; };

	template<typename T> true_t _is_compatible (T *);
	template<typename T> false_t _is_compatible (void *);

	template<typename T> T declval();

	/**
	**	Used to determine if some type has a trait implemented in its inheritance hierarchy.
	**
	**	has_trait<T,traits::X>::value
	*/
	template<typename Subject, typename Trait>
	struct has_trait
	{
		static constexpr const bool value = decltype(_is_compatible<Trait>(declval<typename base_type<Subject>::type *>()))::value;
	};

}};

#endif
