#ifndef __ASR_UTILS_NULL_H
#define __ASR_UTILS_NULL_H

#include <type_traits>
#include <asr/errors/Error>

namespace asr {
namespace utils {

	using namespace asr::errors;

	/**
	**	Generic utility to obtain the NULL value of an item of type T.
	**	When getting NULL of non-reference objects, an exception will be thrown.
	**
	**	Null<T>::get(T t)
	*/

	template<typename T, int=
		1*(std::is_pointer<T>::value) |
		2*(std::is_arithmetic<T>::value || std::is_arithmetic<typename std::remove_pointer<T>::type>::value) |
		4*(std::is_class<T>::value || std::is_reference<T>::value || std::is_class<typename std::remove_pointer<T>::type>::value)>
	struct Null { };

	template<typename T> /* pointer */
	struct Null<T,1> { static inline constexpr T get() { return nullptr; } };

	template<typename T> /* arithmetic */
	struct Null<T,2> { static inline constexpr T get() { return 0; } };

	template<typename T> /* pointer to arithmetic */
	struct Null<T,3> { static inline constexpr T get() { return nullptr; } };

	template<typename T> /* class */
	struct Null<T,4> { static inline constexpr T get() { throw Error("Null of non-reference type does not exist."); } };

	template<typename T> /* pointer to class */
	struct Null<T,5> { static inline constexpr T get() { return nullptr; } };

}};

#endif
