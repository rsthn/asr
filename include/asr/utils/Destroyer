#ifndef __ASR_UTILS_DESTROYER_H
#define __ASR_UTILS_DESTROYER_H

#include <type_traits>
#include <asr/utils/Traits>

namespace asr {
namespace utils {

	/**
	**	Generic utility to destroy items of type T and nullify the reference. Works only for pointers, passing anything else
	**	will cause a nop-call.
	**
	**	Destroyer<T>::destroy(T t, [bool _delete=true])
	*/

	template<typename T, int=
		1*(std::is_pointer<T>::value) |
		2*(std::is_arithmetic<T>::value || std::is_arithmetic<typename std::remove_pointer<T>::type>::value) |
		4*(std::is_class<T>::value || std::is_class<typename std::remove_pointer<T>::type>::value) |
		16*(has_trait<T,traits::no_delete>::value)>
	struct Destroyer { static inline void destroy (T& item, bool _delete=true) { } };

	template<> /* const character string */
	struct Destroyer<char *> {
		static inline void destroy (char *&item, bool _delete=true) { if (item != nullptr && _delete) delete item; item = nullptr; }
		static inline void destroyb (char *item, bool _delete=true) { if (item != nullptr && _delete) delete item; }
	};

	template<typename T> /* pointer */
	struct Destroyer<T,1> {
		static inline void destroy (T& item, bool _delete=true) { if (item != nullptr && _delete) delete item; item = nullptr; }
		static inline void destroyb (T item, bool _delete=true) { if (item != nullptr && _delete) delete item; }
	};

	template<typename T> /* pointer to class */
	struct Destroyer<T,5> {
		static inline void destroy (T& item, bool _delete=true) { if (item != nullptr && _delete) delete item; item = nullptr; }
		static inline void destroyb (T item, bool _delete=true) { if (item != nullptr && _delete) delete item; }
	};

}};

#endif
