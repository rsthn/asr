#ifndef __ASR_UTILS_LINKABLE_H
#define __ASR_UTILS_LINKABLE_H

namespace asr {
namespace utils {

	/**
	**	Generic class for linkable items such as required by linked lists. The responsibility of this class is
	**	to wrap a value into a linkable object.
	*/

	template<typename T>
	class Linkable
	{
		/**
		**	Pointer to the previous item in the chain.
		*/
		Linkable<T> *prevNode;
		
		/**
		**	Pointer to the next item in the chain.
		*/
		Linkable<T> *nextNode;

		/**
		**	Sets the previous/next connection pointers to NULL.
		*/
		Linkable<T> *reset()
		{
			nextNode = prevNode = nullptr;
			return this;
		}

		public:

		/**
		**	Wrapped value.
		*/
		T value;

		/**
		**	Constructor of the linkable item. Makes sure the previous and next pointers are reset.
		*/
		Linkable (T value)
		{
			this->value = value;
			reset();
		}

		/**
		**	Constructs the linkable item with no value. The value can later be set manually.
		*/
		Linkable()
		{
			reset();
		}

		/**
		**	Destructor of the linkable item. The contents are not deleted.
		*/
		virtual ~Linkable()
		{
		}

		/**
		**	Returns the next link.
		*/
		Linkable<T> *next()
		{
			return nextNode;
		}

		/**
		**	Returns the previous link.
		*/
		Linkable<T> *prev()
		{
			return prevNode;
		}

		/**
		**	Links the item to come after the given one.
		*/
		void linkAfter (Linkable<T> *item)
		{
			this->prevNode = item;
			this->nextNode = item ? item->nextNode : nullptr;

			if (item)
			{
				if (item->nextNode) item->nextNode->prevNode = this;
				item->nextNode = this;
			}
		}

		/**
		**	Links the item to come before the given one.
		*/
		void linkBefore (Linkable<T> *item)
		{
			this->prevNode = item ? item->prevNode : nullptr;
			this->nextNode = item;

			if (item)
			{
				if (item->prevNode) item->prevNode->nextNode = this;
				item->prevNode = this;
			}
		}

		/**
		**	Unlinks the item from its neighbors.
		*/
		Linkable<T> *unlink()
		{
			if (this->prevNode) this->prevNode->nextNode = this->nextNode;
			if (this->nextNode) this->nextNode->prevNode = this->prevNode;

			return reset();
		}
	};

}};

#endif
