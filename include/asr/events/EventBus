#ifndef __ASR_EVENTS_EVENTBUS_H
#define __ASR_EVENTS_EVENTBUS_H

#include <asr/utils/List>
#include <asr/events/Event>
#include <asr/defs>

namespace asr {
namespace events {

    /**
     * Allocates an event code.
     */
    #define	ALLOCEVTCODE() (EventBus::availableEventCode++)

    /**
     * @brief The event bus class allows several event listeners to be attached to it, these will be invoked
     * whenever the event that is being listened to is triggered.
     */
    class EventBus
    {
        private:

        /**
         * @brief Listeners attached to this event bus. Grouped by event code.
         */
        List<EventListener*> *listeners[ASR_MAX_EVENT_CODES];

        /**
         * @brief Queue of delayed events. All delayed events are dispatched by calling dispatch().
         */
        List<Event*> *queue;


        public:

        /**
         * @brief Next free event code.
         */
        static int availableEventCode;

        /**
         */
        EventBus();

        /**
         * @brief Destroy the event bus and all its listeners.
         */
        virtual ~EventBus();


        /**
         * @brief Resets the event bus by removing all listeners and empying the queue.
         */
        void reset();


        /**
         * @brief Adds an event listener for a specified event.
         * 
         * @param eventGroup 
         * @param eventCode
         * @param handler
         * @return bool
         */
        bool on (int eventGroup, int eventCode, void (*handler)(Event*));

        bool on (int eventCode, void (*handler)(Event*)) {
            return on(eventCode & ASR_EVENT_GRP_MASK, eventCode, handler);
        }


        /**
         * @brief Removes an event listener from the bus. If only the event code or group is provided all the
         * handlers attached to that event or group will be removed.
         * 
         * @param eventGroup 
         * @param eventCode 
         * @param handler 
         * @return bool 
         */
        bool off (int eventGroup, int eventCode=0, void (*handler)(Event*)=nullptr);

        bool off (int eventCode, void (*handler)(Event*)=nullptr) {
            return off(eventCode & ASR_EVENT_GRP_MASK, eventCode, handler);
        }


        /**
         * @brief Silences or unsilences all handlers attached to an event. If the event fires, silenced handler
         * will not be called.
         * 
         * @param eventGroup 
         * @param eventCode 
         * @param value 
         * @return bool 
         */
        bool silence (int eventGroup, int eventCode, bool value);

        bool silence (int eventCode, bool value) {
            return silence(eventCode & ASR_EVENT_GRP_MASK, eventCode, value);
        }


        /**
         * @brief Prepares an event for its later use. The event is started by calling the `resume` method. Note that
         * NULL is returned if there is an error with the eventCode or if there are no listeners for the event.
         * 
         * @param event 
         * @return Event* 
         */
        Event *prepare (Event *event);


        /**
         * @brief Dispatches an event to the respective listeners.
         * @param event 
         */
        void dispatch (Event *event);


        /**
         * @brief Adds an event to the event bus's queue. Delayed events are dispatched by calling `dispatch`. If there
         * is no matching listener for the desired event no handler will be enqueued.
         * 
         * @param event 
         */
        void enqueue (Event *event);


        /**
         * @brief Dispatches all the delayed events added to the event bus's queue by using `enqueue`.
         */
        void dispatch();

    };

}};

#endif
