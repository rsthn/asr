#ifndef __ASR_DEFS_H
#define __ASR_DEFS_H

#if __WIN32__
    // Windows Vista and later.
    #define WINVER 0x0600
    #define _WIN32_WINNT 0x0600
#endif

/**
 * When AST_TRACK_MEMORY is defined as 1, the memory allocation functions will be tracked and checked
 * for errors and leaks. This is useful for debugging purposes.
 */
#ifndef ASR_TRACK_MEMORY
#define ASR_TRACK_MEMORY 1
#endif

#define TEMPBUFF_SIZE 1024

#include <cstdint>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <format>

#include <asr/ptr>

/**
 * Global definition of standard types.
 */
namespace asr
{
    /**
     * Number of memory blocks currently allocated.
     */
    extern uint32_t memblocks;

    /**
     * Amount of bytes currently allocated.
     */
    extern uint32_t memsize;

    /**
     * Peak maximum amount of memory used.
     */
    extern uint32_t peak_memsize;


    /**
     * Returns the current time in milliseconds.
     * @return time_t
     */
    time_t millis();

    /**
     * Allocates a block of memory of the given size. Never returns NULL because when no memory is
     * left an internal error will occur.
     * 
     * @param size Amount of bytes to allocate.
     * @return void*
     */
    void *alloc (uint32_t size);

    /**
     * Deallocates a previously allocated block of memory. Detects if the block is correct to avoid
     * memory errors.
     * 
     * @param block 
     */
    void dealloc (void *block);

    /**
     * Checks if the block is still alive.
     * @param block 
     */
    bool memblock_alive (void *block);

    /**
     * Enables/disables sending the trace messages to STDOUT.
     */
    void stdtrace (bool value);

    /**
     * Writes a message to the log file.
     */
    [[gnu::format(printf,1,2)]]
    void trace (const char *msg, ...);

    /**
     * Writes a message to the log file without the new line character at the end (aka "raw").
     */
    [[gnu::format(printf,1,2)]]
    void rtrace (const char *msg, ...);

    /**
     * Writes a message to the log file (UNICODE).
     */
    void wtrace (const wchar_t *msg, ...);

    /**
     * Checks if the memory block is still valid (alive) and not null. If not, throws a runtime_error.
     */
    #define valid_ptr(memptr) _valid_ptr(memptr, __FILE__, __LINE__)

    template<typename PtrT>
    PtrT _valid_ptr(PtrT memptr, const char *__file__, int __line__)
    {
        if (!memptr)
            throw std::runtime_error(std::format("used null pointer: {} {}", __FILE__, __LINE__));

        if (!memblock_alive(memptr))
            throw std::runtime_error(std::format("used after free: {} {}", __FILE__, __LINE__));

        return memptr;
    }

};

#endif
