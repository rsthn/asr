#ifndef __ASR_NET_MESSAGE_SCHEMA_H
#define __ASR_NET_MESSAGE_SCHEMA_H

#include <asr/utils/List>
#include <asr/utils/Linkable>
#include <asr/io/Buffer>
#include <asr/errors/Error>

namespace asr {
namespace net {

    using asr::utils::List;
    using asr::utils::Linkable;
    using asr::errors::Error;
    using asr::io::Buffer;


    /**
     * @brief Describes the binary layout of a message.
     */

    class MessageSchema
    {
        public:

        class ErrorNotEnoughSpace : public Error {
            public:
                ErrorNotEnoughSpace() : Error("not enough space in the output buffer", 0) {}
        };

        class ErrorNotEnoughData : public Error {
            public:
                ErrorNotEnoughData() : Error("not enough data in the input buffer", 0) {}
        };

        class ErrorMaxLength : public Error {
            public:
                ErrorMaxLength() : Error("maximum string length exceeded", 0) {}
        };

        /**
         * @brief Available field types.
         */
        static constexpr int T_SEQ = 0;
        static constexpr int T_COND = 1;

        static constexpr int T_INT8 = 10;
        static constexpr int T_UINT8 = 11;
        static constexpr int T_INT16 = 12;
        static constexpr int T_UINT16 = 13;
        static constexpr int T_INT32 = 14;
        static constexpr int T_UINT32 = 15;
        static constexpr int T_STR = 16;

        static constexpr int C_EQ = 1;

        /**
         * @brief Describes a condition.
         */
        struct Cond {
            int type;
            uint32_t value;

            Cond (int type, uint32_t value) : type(type), value(value) {}

            bool result (uint32_t x) const {
                switch (type) {
                    case C_EQ: return value == x;
                }
                return false;
            }
        };

        /**
         * @brief Describes a field in the schema layout.
         */
        struct Field
        {
            /**
             * @brief Parent field, only the root field has no parent.
             */
            Field *parent;

            /**
             * @brief Node of the field in the parent list.
             */
            Linkable<Field*> *node;

            /**
             * @brief Name of the field.
             */
            const char *name = nullptr;

            /**
             * @brief Type of the field.
             */
            int type;

            /**
             * @brief Offset of the field in the message.
             */
            size_t offset = 0;

            /**
             * @brief Indicates if the field has static buffer pre-allocated in the structure (T_STR).
             */
            bool is_static = false;

            /**
             * @brief Maximum length of the string (including zero byte).
             */
            int max_length = 256;

            /**
             * @brief Error code to report when the field is invalid.
             */
            int errorcode = 0;

            /**
             * @brief Error message to report when the field is invalid.
             */
            const char *errormsg = nullptr;

            /**
             * @brief List of children fields (if any).
             */
            List<Field*> *children = nullptr;

            /**
             * @brief Condition of the field (if any).
             */
            Cond *cond = nullptr;

            /**
             * @brief Constructs the field with the given name and type.
             *
             * @param fieldParent
             * @param fieldType One of the `T_*` constants.
             * @param fieldOffset Offset of the field in the output message.
             * @param fieldName Optional name for the field.
             */
            Field (Field *fieldParent, int fieldType, size_t fieldOffset = 0, const char *fieldName = nullptr)
            {
                parent = fieldParent;
                if (parent != nullptr) {
                    if (parent->children == nullptr)
                        parent->children = new List<Field*>();
                    parent->children->push(this);
                    this->node = parent->children->tail();
                }

                type = fieldType;
                offset = fieldOffset;
                name = fieldName;
            }

            /**
             * @brief Destroys the field and all children;
             */
            ~Field() {
                if (children != nullptr)
                    delete children->clear();

                if (cond != nullptr)
                    delete cond;
            }

            /**
             * @brief Sets the condition of the field.
             * @param cond 
             * @return Field*
             */
            Field *setCond (Cond *cond)
            {
                if (this->cond != nullptr)
                    delete this->cond;

                this->cond = cond;
                return this;
            }

            /**
             * @brief Reads an integer from the struct at the field's offset.
             * @param struc
             * @return uint32_t
             */
            uint32_t readInt (char *struc)
            {
                switch (type) {
                    case T_INT8: return *(int8_t *)(struc+offset);
                    case T_UINT8: return *(uint8_t *)(struc+offset);
                    case T_INT16: return *(int16_t *)(struc+offset);
                    case T_UINT16: return *(uint16_t *)(struc+offset);
                    case T_INT32: return *(int32_t *)(struc+offset);
                    case T_UINT32: return *(uint32_t *)(struc+offset);
                }
                return 0;
            }

            /**
             * @brief Reads a pointer from the struct at the field's offset.
             * @param struc
             * @return char *
             */
            char *readPtr (char *struc) {
                return *(char **)(struc+offset);
            }

            /**
             * @brief Writes an integer to the struct at the field's offset.
             * @param struc
             * @param value
             * @return uint32_t
             */
            uint32_t writeInt (char *struc, uint32_t value)
            {
                switch (type) {
                    case T_INT8: return *(int8_t *)(struc+offset) = value;
                    case T_UINT8: return *(uint8_t *)(struc+offset) = value;
                    case T_INT16: return *(int16_t *)(struc+offset) = value;
                    case T_UINT16: return *(uint16_t *)(struc+offset) = value;
                    case T_INT32: return *(int32_t *)(struc+offset) = value;
                    case T_UINT32: return *(uint32_t *)(struc+offset) = value;
                }
                return value;
            }

            /**
             * @brief Writes a pointer to the struct at the field's offset.
             * @param struc
             * @param value
             */
            void writePtr (char *struc, char *value) {
                *(char **)(struc+offset) = value;
            }

            /**
             * @brief Returns the minimum number of bytes required by the field.
             * @return int
             */
            int numBytes()
            {
                switch (type) {
                    case T_COND: return parent->numBytes();
                    case T_INT8: return 1;
                    case T_UINT8: return 1;
                    case T_INT16: return 2;
                    case T_UINT16: return 2;
                    case T_INT32: return 4;
                    case T_UINT32: return 4;
                }
                return 0;
            }

            /**
             * @brief Reads the field from the buffer and writes it to the structure.
             * @param input Buffer to read from.
             * @param output Structure to write to.
             * @return Field* Field to process in the next iteration or `nullptr` if the message is complete.
             */
            Field *read (Buffer *input, char *output)
            {
                uint32_t value;

                switch (type)
                {
                    case T_SEQ:
                        return children->first()->read(input, output);

                    case T_COND:
                        value = parent->readInt(output);
                        break;

                    case T_INT8:
                        if (input->bytesAvailable() < 1) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt8(true));
                        break;

                    case T_UINT8:
                        if (input->bytesAvailable() < 1) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt8(true));
                        break;

                    case T_INT16:
                        if (input->bytesAvailable() < 2) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt16(true));
                        break;

                    case T_UINT16:
                        if (input->bytesAvailable() < 2) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt16(true));
                        break;

                    case T_INT32:
                        if (input->bytesAvailable() < 4) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt32(true));
                        break;

                    case T_UINT32:
                        if (input->bytesAvailable() < 4) throw ErrorNotEnoughData();
                        value = writeInt(output, input->readUInt32(true));
                        break;

                    case T_STR:
                        if (input->bytesAvailable() < 1) throw ErrorNotEnoughData();
                        value = input->readUInt8(true);
                        if (input->bytesAvailable() < value+1) throw ErrorNotEnoughData();

                        if (input->readUInt8()+1 > max_length)
                            throw ErrorMaxLength();

                        if (!is_static) {
                            char *str = (char *)asr::alloc(value + 1);
                            input->read(value, str, 1);
                            writePtr(output, str);
                        } else {
                            input->read(value, output+offset, 1);
                        }

                        break;
                }

                bool t_cond_skip = false;
                if (cond != nullptr && !cond->result(value)) {
                    if (type != T_COND)
                        throw Error(errormsg ? errormsg : "invalid field value found", errorcode);
                    t_cond_skip = true;
                }

                if (!t_cond_skip && children != nullptr && children->length() != 0) {
                    if (type == T_COND)
                        input->drain(numBytes());
                    return children->first();
                }

                if (node->next() != nullptr) {
                    if (type != T_COND)
                        input->drain(numBytes());
                    return node->next()->value;
                }

                if (t_cond_skip)
                    throw Error(parent->errormsg ? parent->errormsg : "invalid field value found", parent->errorcode);

                //violet: ensure the following line is required in all cases (look at T_COND)
                input->drain(numBytes());

                Field *field = parent;
                while (field != nullptr)
                {
                    if (field->type == T_COND) {
                        field = field->parent;
                        continue;
                    }

                    if (field->node == nullptr)
                        return nullptr;

                    if (field->node->next() != nullptr)
                        return field->node->next()->value;

                    field = field->parent;
                }

                return nullptr;
            }

            /**
             * @brief Writes the field from the structure into the buffer.
             * @param input Structure to read from.
             * @param output Buffer to write to.
             * @return Field* Field to process in the next iteration or `nullptr` if the message is complete.
             */
            Field *write (Buffer *output, char *input)
            {
                uint32_t value;

                switch (type)
                {
                    case T_SEQ:
                        return children->first()->write(output, input);

                    case T_COND:
                        value = parent->readInt(input);
                        break;

                    case T_INT8:
                    case T_UINT8:
                        if (output->spaceAvailable() < 1) throw ErrorNotEnoughSpace();
                        output->writeUInt8(value = readInt(input));
                        break;

                    case T_INT16:
                    case T_UINT16:
                        if (output->spaceAvailable() < 2) throw ErrorNotEnoughSpace();
                        output->writeUInt16(value = readInt(input));
                        break;

                    case T_INT32:
                    case T_UINT32:
                        if (output->spaceAvailable() < 4) throw ErrorNotEnoughSpace();
                        output->writeUInt32(value = readInt(input));
                        break;

                    case T_STR:
                        if (output->spaceAvailable() < 1) throw ErrorNotEnoughSpace();

                        char *ptr = is_static ? (input+offset) : readPtr(input);
                        value = strlen(ptr) + 1;

                        if (value > max_length) throw ErrorMaxLength();
                        if (output->spaceAvailable() < value) throw ErrorNotEnoughSpace();

                        output->writeUInt8(value-1);
                        output->write(ptr, value-1);
                        break;
                }

                bool t_cond_skip = false;
                if (cond != nullptr && !cond->result(value)) {
                    if (type != T_COND)
                        throw Error(errormsg ? errormsg : "invalid field value found", errorcode);
                    t_cond_skip = true;
                }

                if (!t_cond_skip && children != nullptr && children->length() != 0) {
                    return children->first()->write(output, input);
                }

                if (node->next() != nullptr)
                    return node->next()->value;

                if (t_cond_skip)
                    throw Error(parent->errormsg ? parent->errormsg : "invalid field value found", parent->errorcode);

                Field *field = parent;
                while (field != nullptr)
                {
                    if (field->type == T_COND) {
                        field = field->parent;
                        continue;
                    }

                    if (field->node == nullptr)
                        return nullptr;

                    if (field->node->next() != nullptr)
                        return field->node->next()->value;

                    field = field->parent;
                }

                return nullptr;
            }
        };

        /**
         * @brief Root field.
         */
        Field *root;

        /**
         * @brief Constructs the schema.
         */
        MessageSchema() {
            root = new Field(nullptr, T_SEQ);
        }

        /**
         * @brief Destroys the schema and all fields.
         */
        ~MessageSchema() {
            delete root;
        }

        /**
         * @brief Adds an 8-bit signed field.
         * @return MessageSchema*
         */
        MessageSchema *int8 (size_t offset) {
            new Field(root, T_INT8, offset);
            return this;
        }

        /**
         * @brief Adds an 8-bit unsigned field.
         * @return MessageSchema*
         */
        MessageSchema *uint8 (size_t offset) {
            new Field(root, T_UINT8, offset);
            return this;
        }

        /**
         * @brief Adds an 16-bit signed field.
         * @return MessageSchema*
         */
        MessageSchema *int16 (size_t offset) {
            new Field(root, T_INT16, offset);
            return this;
        }

        /**
         * @brief Adds an 16-bit unsigned field.
         * @return MessageSchema*
         */
        MessageSchema *uint16 (size_t offset) {
            new Field(root, T_UINT16, offset);
            return this;
        }

        /**
         * @brief Adds an 32-bit signed field.
         * @return MessageSchema*
         */
        MessageSchema *int32 (size_t offset) {
            new Field(root, T_INT32, offset);
            return this;
        }

        /**
         * @brief Adds an 32-bit unsigned field.
         * @return MessageSchema*
         */
        MessageSchema *uint32 (size_t offset) {
            new Field(root, T_UINT32, offset);
            return this;
        }

        /**
         * @brief Adds a string field, maximum of 255 characters unless explicitly set using `max`.
         * @return MessageSchema*
         */
        MessageSchema *str (size_t offset, bool is_static=false) {
            (new Field(root, T_STR, offset))->is_static = is_static;
            return this;
        }

        /* ***** */

        /**
         * @brief Sets the error code to report when the field is invalid.
         * @param errorcode Integer error code.
         * @param errormsg Optional error message.
         * @return MessageSchema*
         */
        MessageSchema *throws (int errorcode, const char *errormsg = nullptr) {
            root->children->last()->errorcode = errorcode;
            root->children->last()->errormsg = errormsg;
            return this;
        }

        /**
         * @brief Add a conditional field (equality), any further fields will be added to it until `end` is called.
         * @param value Value to compare against.
         * @return MessageSchema*
         */
        MessageSchema *when (uint32_t value) {
            root = (new Field(root->children->last(), T_COND))->setCond(new Cond(C_EQ, value));
            return this;
        }

        /**
         * @brief Finish the current conditional field and focuses on the parent field.
         * @return MessageSchema*
         */
        MessageSchema *end() {
            if (root->parent == nullptr || root->parent->parent == nullptr)
                throw Error("Cannot end the root field");
            root = root->parent->parent;
            return this;
        }
    };


}};

#endif
