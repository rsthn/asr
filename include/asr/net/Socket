#ifndef __ASR_NET_SOCKET_H
#define __ASR_NET_SOCKET_H

#include <asr/net/InAddr>

#ifndef SOCKET
#define SOCKET int
#endif

namespace asr {
namespace net {

    /**
     * @brief Wrapper for operating system sockets. Provides higher level functionality.
     */

    class Socket
    {
        protected:

        /**
         * @brief Indicates if the socket is connected.
         */
        bool _connected;


        public:

        /**
         * @brief Type of the socket.
         */
        int type;

        /**
         * @brief Used for UDP sockets. If `persistent` is set the socket will not be closed.
         */
        int persistent;

        /**
         * @brief Actual socket resource assigned by the operating system.
         */
        SOCKET socket;

        /**
         * @brief Local address the socket is currently bound to. Set after a call to `bind`.
         */
        InAddr *local = nullptr;

        /**
         * @brief Remote address the socket is connected to. When in UDP mode (SOCK_DGRAM) this contains the last address
         * obtained upon receiving data.
         */
        InAddr *remote = nullptr;

        /**
         * @brief Address of the target where the data will be sent in UDP mode (SOCK_DGRAM).
         */
        InAddr *target = nullptr;


        /**
         * @brief Allocates a network socket.
         *
         * @param type Socket type (SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, SOCK_SEQPACKET).
         * @param source When provided, this socket number will be used instead of allocating a new one.
         */
        Socket (int type=SOCK_STREAM, SOCKET source=-1);


        /**
         * @brief Releases resources, closes and shuts down the socket.
         */
        virtual ~Socket();


        /**
         * @brief Returns `true` if the socket is a valid socket number.
         * @return bool 
         */
        bool valid() const {
            return this->socket != -1;
        }


        /**
         * @brief Forces invalidation of the socket number to avoid shutting down and closing it when the object is destroyed.
         * @return Socket*
         */
        Socket *invalidate() {
            this->socket = -1;
            return this;
        }


        /**
         * @brief Binds the socket to an internet address on the specified port.
         *
         * @param port If not specified, a random port number will be assigned by the OS.
         * @param addr Leave as `nullptr` or unspecified to select any address.
         * @return Boolean indicating if the operation was successful.
         */
        bool bind (int port=0, const char *addr=nullptr)
        {
            if (this->socket == -1)
                return false;

            if (local == nullptr)
                local = new InAddr();

            local->clear()->setAddrStr(addr)->setPort(port);

            if (::bind (this->socket, (const struct sockaddr *)&local->descriptor, sizeof(struct sockaddr_in)) != -1) {
                socklen_t desclen = sizeof(struct sockaddr);
                ::getsockname (this->socket, (struct sockaddr *)&local->descriptor, &desclen);
                return true;
            }

            return false;
        }


        /**
         * @brief Sets the blocking mode of the socket. Returns itself or `nullptr` if error occurred.
         * @param blocking 
         * @return Socket*
         */
        Socket *setBlocking (bool blocking)
        {
            if (this->socket == -1)
                return nullptr;

            if (blocking)
            {
                #if __WIN32__
                    unsigned long value = 1;
                    ::ioctlsocket (this->socket, FIONBIO, &value);
                #else
                    ::fcntl (this->socket, F_SETFL, fcntl (this->socket, F_GETFL) & ~O_NONBLOCK);
                #endif
            }
            else
            {
                #if __WIN32__
                    unsigned long value = 0;
                    ::ioctlsocket (this->socket, FIONBIO, &value);
                #else
                    ::fcntl (this->socket, F_SETFL, fcntl (this->socket, F_GETFL) | O_NONBLOCK);
                #endif
            }

            return this;
        }


        /**
         * @brief Attempts to connect to a remote server. Returns `false` on errors.
         *
         * @param address Address of the server.
         * @param port Port number of the server.
         * @param timeout Time to wait for the connection to be established (default is 5).
         * @return bool
         */
        bool connect (const char *address, int port, int timeout=5)
        {
            struct timeval tv;
            fd_set tmpset; 

            _connected = false;
            if (this->socket == -1)
                return false;

            // Initialize remote address.
            this->remote->clear()->setAddrStr(address)->setPort(port);
            this->setBlocking(false);

            // Attempt to connect to the server.
            int res = ::connect (this->socket, (const struct sockaddr *)&remote->descriptor, sizeof(struct sockaddr_in));

            // If connect failed right away, try to give the server some time before reporting an error.
            if (res < 0)
            {
                // If connect is not in progress, that's it.
                #if __WIN32__
                    if (WSAGetLastError() != WSAEWOULDBLOCK)
                        return false;
                #else
                    if (errno != EINPROGRESS)
                        return false;
                #endif

                tv.tv_sec = timeout;
                tv.tv_usec = 0;

                FD_ZERO (&tmpset); 
                FD_SET (this->socket, &tmpset);
                if (::select(this->socket+1, nullptr, &tmpset, nullptr, &tv) > 0)
                {
                    socklen_t lon = sizeof(int);
                    int valopt;

                    if (::getsockopt(this->socket, SOL_SOCKET, SO_ERROR, (char*)&valopt, &lon) < 0)
                        return false;

                    if (!valopt)
                        return _connected = true;
                }

                return false;
            }

            return _connected = true;
        }


        /**
         * @brief Closes the socket and shuts down the communication channel if the socket is active.
         */
        void close()
        {
            if (socket == -1)
                return;

            #if __WIN32__
                if (_connected)
                    ::shutdown (socket, SD_BOTH);
                ::closesocket (socket);
            #else
                if (_connected)
                    ::shutdown (socket, SHUT_RDWR);
                ::close (socket);
            #endif

            _connected = false;
            socket = -1;
        }


        /**
         * @brief Starts listening for incoming connections on the specified port.
         *
         * @param port If not provided or -1 the current configuration set by `bind` will be used.
         * @param backlog Number of pending connections that can be queued.
         * @return Returns `true` when a connection is established or `false` if an error occurred.
         */
        bool listen (int port=-1, int backlog=128)
        {
            if (this->socket == -1)
                return false;

            if (port != -1) {
                if (!this->bind(port))
                    return false;
            }

            return ::listen (this->socket, backlog) != -1;
        }


        /**
         * @brief Returns `true` if the socket is connected.
         * @return bool
         */
        bool connected() const {
            return _connected;
        }


        /**
         * @brief Tests if the connection is still alive for I/O and returns status.
         * @param timeout Time to wait before returning (milliseconds).
         * @return bool
         */
        bool alive (int timeout=150) const
        {
            fd_set dset;
            FD_ZERO (&dset);

            struct timeval tm;
            tm.tv_sec = timeout / 1000;
            tm.tv_usec = (timeout % 1000) * 1000;
            FD_SET (socket, &dset);

            // Wait for a bit until something occurs.
            int scnt = ::select (socket+1, &dset, nullptr, nullptr, &tm);
            printf("scnt: %d\n", scnt);
            return scnt < 0 ? false : true;
        }


        /**
         * @brief After `listen` returns `true`, a connection will be waiting to be accepted, by calling this method the
         * connection will be granted and a new socket will be returned for further communication.
         *
         * @return Socket*
         */
        Socket *accept()
        {
            if (this->socket == -1)
                return nullptr;

            // Accept the connection.
            socklen_t desclen = sizeof(struct sockaddr);
            int nsocket = ::accept (this->socket, (struct sockaddr *)&this->remote->descriptor, &desclen);
            if (nsocket == -1) return nullptr;

            // Create new socket using already obtained socket handle.
            Socket *s = new Socket (SOCK_STREAM, nsocket);
            s->remote->set(this->remote);
            s->_connected = true;

            return s;
        }


        /**
         * @brief Reads at most `numBytes` from the socket into the given buffer.
         *
         * @param buffer Buffer to read the data into.
         * @param numBytes Number of bytes to read.
         * @param bufferSpace Number of bytes available in the buffer. If not specified `numBytes` will be used.
         * @return Number of bytes read or 0 if an error occurred.
         */
        int read (char *buffer, int numBytes, int bufferSpace=-1)
        {
            if (this->socket == -1)
                return 0;

            if (bufferSpace == -1)
                bufferSpace = numBytes;

            numBytes = numBytes > bufferSpace ? bufferSpace : numBytes;
            int n;

            if (type == SOCK_DGRAM)
                n = ::recvfrom (this->socket, buffer, numBytes, 0, (struct sockaddr *)&this->remote->descriptor, &this->remote->length);
            else
                n = ::recv (this->socket, buffer, numBytes, 0);

            return n < 1 ? 0 : n;
        }


        /**
         * @brief Writes the specified number of bytes from the buffer to the socket.
         *
         * @param buffer Buffer to read the data from.
         * @param numBytes Number of bytes to write. If not specified the length of the buffer (strlen) will be used.
         * @return Number of bytes written or 0 if an error occurred.
         */
        int write (const char *buffer, int numBytes=-1)
        {
            if (this->socket == -1)
                return 0;

            if (numBytes == -1)
                numBytes = strlen(buffer);

            fd_set dset; FD_ZERO (&dset);
            struct timeval timeout;
            timeout.tv_sec = timeout.tv_usec = 0;
            FD_SET (socket, &dset);

            // Wait for a while until something occurs.
            int n, scnt = ::select (socket+1, nullptr, &dset, nullptr, &timeout);
            if (scnt != 1) return 0;

            if (type == SOCK_DGRAM)
                n = ::sendto (this->socket, buffer, numBytes, 0, (struct sockaddr *)&this->target->descriptor, this->target->length);
            else
                n = ::send (this->socket, buffer, numBytes, 0);

            return n < 1 ? 0 : n;
        }
    };

}};

#endif
